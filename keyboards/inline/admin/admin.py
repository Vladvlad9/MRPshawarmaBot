import asyncio

from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message, InputFile
from aiogram.utils.callback_data import CallbackData
from aiogram.utils.exceptions import BadRequest

from crud import CRUDUsers
from loader import bot
from states.admins.AdminState import AdminState
admin_cb = CallbackData("admin", "target", "action", "id", "editId")

class AdminForm:

    @staticmethod
    async def back_ikb(target: str, action: str = None) -> InlineKeyboardMarkup:
        """
        –û–±—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –æ–¥–∏–Ω —à–∞–≥ –Ω–∞–∑–∞–¥
        :param action: –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –µ—Å–ª–∏ –≤ callback_data –µ—Å—Ç—å –ø–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        :param target: –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=admin_cb.new(target, action, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def start_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        :return:
        """
        data = {
            "üì® –†–∞—Å—Å—ã–ª–∫–∞": {"target": "Newsletter", "action": "get_Newsletter", "id": 0, "editid": 0},
            "üë®‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": {"target": "Users", "action": "get_Users", "id": 0, "editid": 0},
        }
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=name, callback_data=admin_cb.new(name_items["target"],
                                                                               name_items["action"],
                                                                               name_items["id"],
                                                                               name_items["editid"]))
                ] for name, name_items in data.items()
            ]
        )

    @staticmethod
    async def newsletter_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        :return:
        """
        data = {"üèû –ö–∞—Ä—Ç–∏–Ω–∫–∞": {"target": "Newsletter", "action": "get_Picture", "id": 0, "editid": 0},
                "üóí –¢–µ–∫—Å—Ç": {"target": "Newsletter", "action": "get_Text", "id": 0, "editid": 0},
                "üèû –ö–∞—Ä—Ç–∏–Ω–∫–∞ + –¢–µ–∫—Å—Ç üóí": {"target": "Newsletter", "action": "get_PicTex", "id": 1, "editid": 0},
                "‚óÄÔ∏è –ù–∞–∑–∞–¥": {"target": "StartMenu", "action": "", "id": 0, "editid": 0},
                }
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=name, callback_data=admin_cb.new(name_items["target"],
                                                                               name_items["action"],
                                                                               name_items["id"],
                                                                               name_items["editid"]))
                ] for name, name_items in data.items()
            ]
        )

    @staticmethod
    async def process_admin_profile(callback: CallbackQuery = None, message: Message = None,
                                    state: FSMContext = None) -> None:
        if callback:
            if callback.data.startswith('admin'):
                data = admin_cb.parse(callback_data=callback.data)

                if data.get("target") == "StartMenu":
                    await callback.message.edit_text(text="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
                                                     reply_markup=await AdminForm.start_ikb())

                elif data.get("target") == "Newsletter":
                    await state.finish()
                    if data.get("action") == "get_Newsletter":
                        text = "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–¥–µ–ª—è—Ç—å —Ç–µ–∫—Å—Ç –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º –∏–ª–∏ –∫—É—Ä—Å–∏–≤–æ–º, –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Ç–∏–ª—å –∫–æ–¥–∞ –∏–ª–∏ " \
                               "–≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n" \
                               "–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–µ–≥–æ–≤:\n" \
                               "b<b> —Ç–µ–∫—Å—Ç </b>/b - –í—ã–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º\n" \
                               "i<i> —Ç–µ–∫—Å—Ç </i>/i - –í—ã–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∫—É—Ä—Å–∏–≤–æ–º\n" \
                               "u<u> —Ç–µ–∫—Å—Ç </u>/u - –í—ã–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º\n" \
                               "s<s> —Ç–µ–∫—Å—Ç </s>/s - –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞\n" \
                               "tg-spoiler<tg-spoiler> —Ç–µ–∫—Å—Ç </tg-spoiler>/tg-spoiler - –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç —Å–ø–æ–π–ª–µ—Ä–∞, " \
                               "–∫–æ—Ç–æ—Ä–∞—è —Å–∫—Ä—ã–≤–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç\n" \
                               "<a href='http://www.tg.com/'>—Ç–µ–∫—Å—Ç</a> - –°–æ–∑–¥–∞–µ—Ç –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É –Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"
                        await callback.message.edit_text(text=f"{text}",
                                                         reply_markup=await AdminForm.newsletter_ikb())
                        # await AdminState.Newsletter.set()

                    elif data.get('action') == "get_Picture":
                        id = data.get('id')
                        await state.update_data(id=id)
                        await callback.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É!",
                                                         reply_markup=await AdminForm.back_ikb(
                                                             target="Newsletter",
                                                             action="get_Newsletter")
                                                         )
                        await AdminState.NewsletterPhoto.set()

                    elif data.get('action') == "get_Text":
                        id = data.get('id')
                        await state.update_data(id=id)
                        await callback.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –µ–≥–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å",
                                                         reply_markup=await AdminForm.back_ikb(
                                                             target="Newsletter",
                                                             action="get_Newsletter")
                                                         )
                        await AdminState.NewsletterText.set()

                    elif data.get('action') == "get_PicTex":
                        id = data.get('id')
                        await state.update_data(id=id)
                        await callback.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç!",
                                                         reply_markup=await AdminForm.back_ikb(
                                                             target="Newsletter",
                                                             action="get_Newsletter")
                                                         )
                        await AdminState.NewsletterText.set()

        if message:
            await message.delete()

            try:
                await bot.delete_message(
                    chat_id=message.from_user.id,
                    message_id=message.message_id - 1
                )
            except BadRequest:
                pass

            if state:

                if await state.get_state() == "AdminState:NewsletterText":
                    try:
                        get_state = await state.get_data()
                        if int(get_state['id']) == 1:
                            await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É")
                            await state.update_data(caption=message.text)
                            await AdminState.NewsletterPhoto.set()
                        else:
                            users = await CRUDUsers.get_all()

                            tasks = []
                            for user in users:
                                tasks.append(bot.send_message(chat_id=user.user_id,
                                                              text=message.text,
                                                              parse_mode="HTML"))
                            await asyncio.gather(*tasks, return_exceptions=True)

                            await state.finish()
                    except Exception as e:
                        print(e)

                elif await state.get_state() == "AdminState:NewsletterPhoto":
                    if message.content_type == "photo":
                        try:
                            state_id = await state.get_data()
                            users = await CRUDUsers.get_all()
                            if int(state_id['id']) == 1:
                                tasks = []
                                for user in users:
                                    tasks.append(bot.send_photo(chat_id=user.user_id, photo=message.photo[2].file_id,
                                                                caption=state_id['caption']))
                                await asyncio.gather(*tasks, return_exceptions=True)
                            else:
                                tasks = []
                                for user in users:
                                    tasks.append(bot.send_photo(chat_id=user.user_id, photo=message.photo[2].file_id))
                                await asyncio.gather(*tasks, return_exceptions=True)

                        except Exception as e:
                            print(e)

                        await state.finish()
                        await message.answer(text="–†–∞—Å—Å—ã–ª–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ",
                                             reply_markup=await AdminForm.start_ikb()
                                             )
                    else:
                        await message.answer(text="–≠—Ç–æ –Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫–∞!\n"
                                                  "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                                             reply_markup=await AdminForm.back_ikb(
                                                 target="Newsletter",
                                                 action="get_Newsletter")
                                             )
                        await AdminState.NewsletterPhoto.set()