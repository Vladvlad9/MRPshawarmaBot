import asyncio
import logging

from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.utils.callback_data import CallbackData
from aiogram.utils.exceptions import BadRequest

from config import CONFIG
from crud import CRUDSubCategory, CRUDProduct, CRUDOrder
from crud.categoryCRUD import CRUDCategory
from crud.orderDetailCRUD import CRUDOrderDetail
from crud.sizeCRUD import CRUDSize
from crud.userCRUD import CRUDUsers
from loader import bot
from schemas import OrderDetailSchema, OrderSchema
from states.users.userStates import UserStates
import re
import logging
main_cb = CallbackData("main", "target", "action", "id", "editId", "newId")


class MainForms:

    @staticmethod
    async def check(get_basket: list):
        text2 = ""
        count = 1
        res_sum = 0
        for i in get_basket:
            product = await CRUDProduct.get(product_id=i.product_id)
            sub_category = await CRUDSubCategory.get(sub_category_id=product.sub_category_id)
            res_sum += i.subtotal
            text2 += f"–¢–æ–≤–∞—Ä ‚Ññ {count}\n" \
                     f"–ù–∞–∑–≤–∞–Ω–∏–µ - {sub_category.name}\n" \
                     f"–¶–µ–Ω–∞ - {product.price}\n" \
                     f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - {i.quantity}\n\n"
            count += 1
        return text2 + f"–ö –æ–ø–ª–∞—Ç–µ {res_sum}\n\n"

    @staticmethod
    async def order(callback: CallbackQuery = None, message: Message = None, state: FSMContext = None):
        user = await CRUDUsers.get(user_id=callback.from_user.id)
        basket = await CRUDOrderDetail.get_all(user_id=user.id)
        textBasket = await MainForms.check(get_basket=basket)

        getDataState = await state.get_data()
        getCard = "–ö–∞—Ä—Ç–æ–π" if getDataState['bankcard'] == "yes" else "–ù–∞–ª–∏—á–Ω—ã–º–∏"

        text = f"–î–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:\n\n"\
               f"–ò–º—è - <b>{getDataState['userName']}</b>\n"\
               f"–¢–µ–ª–µ—Ñ–æ–Ω - <b>{getDataState['phone']}</b>\n"\
               f"–í—Ä–µ–º—è - <b>{getDataState['time']}</b>\n"\
               f"–û–ø–ª–∞—Ç–∞ - {getCard}\n"\
               f"<tg-spoiler>----------------------------"\
               f"</tg-spoiler>\n\n"\
               f"{textBasket}"

        if callback:
            await callback.message.edit_text(text=text,
                                             reply_markup=await MainForms.confirmation_ikb(),
                                             parse_mode="HTML")
        else:
            await message.answer(text=text,
                                 reply_markup=await MainForms.confirmation_ikb(),
                                 parse_mode="HTML")

    @staticmethod
    async def main_ikb(user_id: int) -> InlineKeyboardMarkup:
        user = await CRUDUsers.get(user_id=user_id)
        basket = await CRUDOrderDetail.get_all(user_id=user.id)
        basket_text = "–ö–æ—Ä–∑–∏–Ω–∞"
        if basket:
            basket_text = f"–ö–æ—Ä–∑–∏–Ω–∞ ({len(basket)})"

        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ú–µ–Ω—é",
                                         callback_data=main_cb.new("Menu", "getMenu", 0, 0, 0)),

                ],
                [
                    InlineKeyboardButton(text=basket_text,
                                         callback_data=main_cb.new("Basket", "getBasket", 0, 0, 0)),
                ],
                [
                    InlineKeyboardButton(text="üë§–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
                                         callback_data=main_cb.new("myProfile", "getProfile", 0, 0, 0)),
                    InlineKeyboardButton(text="üÜò–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å",
                                         callback_data=main_cb.new("help", "getHelp", 0, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def category_ikb() -> InlineKeyboardMarkup:

        return InlineKeyboardMarkup(
            inline_keyboard=[
                                [
                                    InlineKeyboardButton(text=category.name,
                                                         callback_data=main_cb.new("Menu", "Category", category.id, 0,
                                                                                   0))
                                ]
                                for category in await CRUDCategory.get_all()
                            ] + [
                                [
                                    InlineKeyboardButton(text='‚Üê –ù–∞–∑–∞–¥',
                                                         callback_data=main_cb.new("Main", "", 0, 0, 0))
                                ]
                            ]
        )

    @staticmethod
    async def sub_category_ikb(category_id) -> InlineKeyboardMarkup:

        return InlineKeyboardMarkup(
            inline_keyboard=[
                                [
                                    InlineKeyboardButton(text=sub_category.name,
                                                         callback_data=main_cb.new("Menu", "Product",
                                                                                   sub_category.id, category_id, 0))
                                ]
                                for sub_category in await CRUDSubCategory.get_all(category_id=category_id)
                            ] + [
                                [
                                    InlineKeyboardButton(text='‚Üê –ù–∞–∑–∞–¥',
                                                         callback_data=main_cb.new("Menu", "getMenu", category_id, 0,
                                                                                   0))
                                ]
                            ]
        )

    @staticmethod
    async def description_pizza_ikb(
            price=0,
            page: int = 1,
            category_id=0,
            sub_category_id=0,
            count: int = 1) -> InlineKeyboardMarkup:

        size_id = 350

        price = float(price) * page

        if page == 1:
            prev_page = 1
            next_page = page + 1
        else:
            prev_page = page - 1
            next_page = page + 1

        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=f"–¶–µ–Ω–∞: {price:.2f}",
                                         callback_data=main_cb.new("", 0, 0, 0, 0)),
                    InlineKeyboardButton(text=f"–†–∞–∑–º–µ—Ä: {size_id}",
                                         callback_data=main_cb.new("", 0, 0, 0, 0))
                ],
                [
                    InlineKeyboardButton(text="‚ûñ",
                                         callback_data=main_cb.new(target="Menu",
                                                                   action="ProductsPage",
                                                                   id=prev_page,
                                                                   editId=0,
                                                                   newId=0)),
                    InlineKeyboardButton(text=str(page),
                                         callback_data=main_cb.new(0, 0, count, category_id, sub_category_id)),
                    InlineKeyboardButton(text="‚ûï",
                                         callback_data=main_cb.new(target="Menu",
                                                                   action="ProductsPage",
                                                                   id=next_page,
                                                                   editId=0,
                                                                   newId=0))
                ],
                [
                    InlineKeyboardButton(text="‚ûï –í –ö–æ—Ä–∑–∏–Ω—É",
                                         callback_data=main_cb.new(target="Menu",
                                                                   action="InBasket",
                                                                   id=page,
                                                                   editId=0,
                                                                   newId=0))
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data=main_cb.new("Menu", "Category", category_id, sub_category_id, 0))
                ]
            ]
        )

    @staticmethod
    async def basket_ikb() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å",
                                         callback_data=main_cb.new("Basket", "PlaceInOrder", id, 0, 0)),
                    InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                                         callback_data=main_cb.new("Basket", "EditBasket", id, 0, 0))
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new("Main", "", id, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def editBasket_ikb(user_id: int) -> InlineKeyboardMarkup:
        dataBasket = {}
        user = await CRUDUsers.get(user_id=user_id)
        baskets = await CRUDOrderDetail.get_all(user_id=user.id)

        for basket in baskets:
            product = await CRUDProduct.get(product_id=basket.product_id)
            subCategory = await CRUDSubCategory.get(sub_category_id=product.sub_category_id)
            if "Product" in dataBasket:
                dataBasket["Product"] += [{
                    "name": subCategory.name,
                    "quantity": basket.quantity,
                    "id": subCategory.id,
                    "basket_id": basket.id,
                    "product_id": basket.product_id
                }]
            else:
                dataBasket["Product"] = [{
                    "name": subCategory.name,
                    "quantity": basket.quantity,
                    "id": subCategory.id,
                    "basket_id": basket.id,
                    "product_id": basket.product_id
                }]

        return InlineKeyboardMarkup(
            inline_keyboard=[
                                [
                                    InlineKeyboardButton(text=item['name'],
                                                         callback_data=main_cb.new("Basket", "EdShowName",
                                                                                   item['id'],
                                                                                   0, 0)),

                                    InlineKeyboardButton(text=f"–ö–æ–ª-–≤–æ {item['quantity']}",
                                                         callback_data=main_cb.new("Basket", "editQuantity",
                                                                                   item['basket_id'],
                                                                                   item['product_id'],
                                                                                   0)),
                                    InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å",
                                                         callback_data=main_cb.new("Basket", "editDelete",
                                                                                   item['basket_id'], 0, 0))
                                ]
                                for basket, items in dataBasket.items() for item in items
                            ] + [
                                [
                                    InlineKeyboardButton(text='‚Üê –ù–∞–∑–∞–¥',
                                                         callback_data=main_cb.new("Basket", "getBasket", 0, 0, 0))
                                ]
                            ]
        )

    @staticmethod
    async def skip_ikb() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                                         callback_data=main_cb.new("Basket", "Confirmation", 0, 0, 0))
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data=main_cb.new("Basket", "Confirmation", 0, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def confirmation_ikb() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å",
                                         callback_data=main_cb.new("Basket", "SendingAdmins", 0, 0, 0))
                ],
                [
                    InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
                                         callback_data=main_cb.new("Basket", "PlaceInOrder", 0, 0, 0))
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data=main_cb.new("Basket", "Confirmation", 0, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def confirmAdmin_ikb(user_id: int) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=main_cb.new("Admins", "Confirm", user_id, 0, 0)),
                    InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å", callback_data=main_cb.new("Admins", "WriteUser", user_id, 0, 0)),
                ]
            ]
        )

    @staticmethod
    async def bankCard_ikb() -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–î–∞", callback_data=main_cb.new("Basket", "BankCard", "yes", 0, 0)),
                    InlineKeyboardButton(text="–ù–µ—Ç", callback_data=main_cb.new("Basket", "BankCard", "no", 0, 0))
                ]
            ]
        )

    @staticmethod
    async def back_ikb(target: str, action: str, id: int = 0) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new(target, action, id, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def process(callback: CallbackQuery = None, message: Message = None, state: FSMContext = None) -> None:
        if callback:
            if callback.data.startswith("main"):
                data = main_cb.parse(callback_data=callback.data)

                if data.get("target") == "Main":
                    await state.finish()
                    text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n" \
                           "–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –º–µ–Ω—é"
                    await callback.message.edit_text(text=text,
                                                     reply_markup=await MainForms.main_ikb(user_id=callback.from_user.id))

                elif data.get("target") == "myProfile":
                    if data.get("action") == "getProfile":
                        user = await CRUDUsers.get(user_id=callback.from_user.id)
                        text = ("–ü—Ä–æ—Ñ–∏–ª—å\n\n"
                                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ - {user.purchase_quantity}\n\n"
                                f'<code>https://t.me/MyPersonalUladIslauTestBot?start={callback.from_user.id}</code>')
                        await callback.message.edit_text(text=text,
                                                         parse_mode="HTML",
                                                         reply_markup=await MainForms.back_ikb(target="Main",
                                                                                               action=""))

                elif data.get("target") == "Menu":
                    if data.get("action") == "getMenu":
                        text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ ‚¨áÔ∏è"
                        if await CRUDCategory.get_all():
                            await callback.message.edit_text(text=text,
                                                             reply_markup=await MainForms.category_ikb())
                        else:
                            await callback.message.edit_text(text="–¢–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

                    elif data.get('action') == "Category":
                        category_id = int(data.get('id'))
                        subCategory = await CRUDSubCategory.get_all(category_id=category_id)

                        if subCategory:
                            await state.update_data(category_id=category_id)

                            text = "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —Ç–æ–≤–∞—Ä —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"
                            await callback.message.edit_text(text=text,
                                                             reply_markup=await MainForms.sub_category_ikb(
                                                                 category_id=category_id)
                                                             )
                        else:
                            await callback.message.delete()
                            await callback.message.answer(text="–¢–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                                                          reply_markup=await MainForms.back_ikb(target="Menu",
                                                                                                action="getMenu",
                                                                                                id=category_id))

                    elif data.get('action') == "Product":
                        sub_category_id = int(data.get('id'))
                        category_id = int(data.get('editId'))

                        await state.update_data(sub_category_id=sub_category_id)
                        product = await CRUDProduct.get(category_id=category_id, sub_category_id=sub_category_id)

                        if product:
                            try:
                                photo = open(f'/opt/git/MRPshawarmaBot/image/{product.image_url}.jpg', 'rb')

                                await callback.message.delete()
                                await callback.message.answer_photo(photo=photo,
                                                                    caption=f"_–ù–∞–∑–≤–∞–Ω–∏–µ: <b>__</b>\n\n"
                                                                            f"–°–æ—Å—Ç–∞–≤: <b>{product.description}</b>\n\n",
                                                                    reply_markup=await MainForms.description_pizza_ikb(
                                                                        price=int(product.price)

                                                                    ),
                                                                    parse_mode="HTML")
                            except FileNotFoundError as e:
                                print(e)
                                await callback.message.delete()
                                await callback.message.answer(text=f"_–ù–∞–∑–≤–∞–Ω–∏–µ: <b>__</b>\n\n"
                                                                   f"–°–æ—Å—Ç–∞–≤: <b>{product.description}</b>\n\n",
                                                              reply_markup=await MainForms.description_pizza_ikb(
                                                                  price=int(product.price)),
                                                              parse_mode="HTML"
                                                              )
                        else:
                            await callback.message.edit_text(text="–¢–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                                                             reply_markup=await MainForms.back_ikb(target="Menu",
                                                                                                   action="Category",
                                                                                                   id=category_id))

                    elif data.get('action') == 'ProductsPage':
                        page = int(data.get('id'))
                        get_state_data = await state.get_data()
                        product = await CRUDProduct.get(category_id=int(get_state_data['category_id']),
                                                        sub_category_id=int(get_state_data['sub_category_id']))
                        try:
                            photo = open(f'/opt/git/MRPshawarmaBot/image/{product.image_url}.jpg', 'rb')

                            await callback.message.delete()
                            await callback.message.answer_photo(photo=photo,
                                                                caption=f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>__</b>\n\n"
                                                                        f"–°–æ—Å—Ç–∞–≤: <b>{product.description}</b>\n\n",
                                                                reply_markup=await MainForms.description_pizza_ikb(
                                                                    page=page,
                                                                    price=int(product.price)
                                                                ),
                                                                parse_mode="HTML")
                        except FileNotFoundError as e:
                            print(e)
                            await callback.message.delete()
                            await callback.message.answer(text=f"_–ù–∞–∑–≤–∞–Ω–∏–µ: <b>__</b>\n\n"
                                                               f"–°–æ—Å—Ç–∞–≤: <b>{product.description}</b>\n\n",
                                                          parse_mode="HTML",
                                                          reply_markup=await MainForms.description_pizza_ikb(
                                                              page=page,
                                                              price=int(product.price))
                                                          )

                    elif data.get('action') == 'InBasket':
                        try:
                            count = int(data.get('id'))
                            get_state_data = await state.get_data()
                            product = await CRUDProduct.get(category_id=1,
                                                            sub_category_id=1)
                            logging.info(f'cat: {int(get_state_data["category_id"])}')
                            logging.info(f"sub_cat: {int(get_state_data['sub_category_id'])}")

                            orderDetails = await CRUDOrderDetail.get(user_id=callback.from_user.id)

                            orderDetailsProduct = await CRUDOrderDetail.get(user_id=callback.from_user.id,
                                                                            product_id=product.id)
                            if orderDetailsProduct:
                                orderDetailsProduct.quantity = count
                                orderDetailsProduct.subtotal = product.price * count

                                await CRUDOrderDetail.update(orderDetail=orderDetailsProduct)
                                text = "–û–±–Ω–æ–≤–∏–ª–∏ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ"

                                await callback.message.delete()
                                await callback.message.answer(text=f"–í—ã —É—Å–ø–µ—à–Ω–æ {text} !",
                                                              reply_markup=await MainForms.main_ikb(
                                                                  user_id=callback.from_user.id))
                            else:
                                texts = "–î–æ–±–∞–≤–∏–ª–∏ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"
                                user = await CRUDUsers.get(user_id=callback.from_user.id)
                                await CRUDOrderDetail.add(orderDetail=OrderDetailSchema(
                                    user_id=user.id,
                                    product_id=product.id,
                                    quantity=count,
                                    subtotal=product.price * count
                                ))
                                await callback.message.delete()
                                await callback.message.answer(text=f"–í—ã —É—Å–ø–µ—à–Ω–æ {texts} !",
                                                              reply_markup=await MainForms.main_ikb(
                                                                  user_id=callback.from_user.id))
                        except Exception as e:
                            logging.error(f'Error in add basket: {e}')

                elif data.get('target') == "Basket":
                    if data.get('action') == "getBasket":
                        user = await CRUDUsers.get(user_id=callback.from_user.id)
                        basket = await CRUDOrderDetail.get_all(user_id=user.id)
                        if basket:
                            textBasket = await MainForms.check(get_basket=basket)
                            await callback.message.edit_text(text=textBasket,
                                                             reply_markup=await MainForms.basket_ikb()
                                                             )
                        else:
                            text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!\n" \
                                   "–î–æ–±–∞–≤—å—Ç–µ –≤ –º–µ–Ω—é"
                            await callback.message.edit_text(text=text,
                                                             reply_markup=await MainForms.back_ikb(
                                                                 target="Main",
                                                                 action=""
                                                             ))

                    elif data.get('action') == "PlaceInOrder":
                        await state.finish()
                        await callback.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è",
                                                         reply_markup=await MainForms.back_ikb(target="Basket",
                                                                                               action="getBasket"))
                        await UserStates.USERNAME.set()

                    elif data.get('action') == "BankCard":
                        await state.update_data(bankcard=data.get('id'))
                        await callback.message.edit_text(text="–£—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞",
                                                         reply_markup=await MainForms.skip_ikb())
                        await UserStates.DESCRIPTION.set()

                    elif data.get('action') == "Confirmation":
                        await state.update_data(description="–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
                        await MainForms.order(callback=callback, state=state)

                    elif data.get('action') == "SendingAdmins":
                        getDataState = await state.get_data()
                        user = await CRUDUsers.get(user_id=callback.from_user.id)
                        user.purchase_quantity += 1
                        await CRUDUsers.update(user=user)
                        get_numer = 0
                        try:
                            bankCard = True if getDataState['bankcard'] == "yes" else False
                            get_numer = await CRUDOrder.add(order=OrderSchema(user_id=callback.from_user.id,
                                                                              userName=getDataState['userName'],
                                                                              total_amount=0,
                                                                              phone=getDataState['phone'],
                                                                              time=getDataState['time'],
                                                                              description=getDataState['description'],
                                                                              bankcard=bankCard
                                                                              )
                                                            )
                            await callback.message.edit_text(text=f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–∏–ª–∏ –∑–∞–∫–∞–∑ <b>‚Ññ{get_numer.id}</b>\n"
                                                                  "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –≤–∞–º –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ",
                                                             reply_markup=await MainForms.main_ikb(user_id=callback.from_user.id),
                                                             parse_mode="HTML")

                        except Exception as e:
                            print(f'add order error {e}')
                        user = await CRUDUsers.get(user_id=callback.from_user.id)
                        basket = await CRUDOrderDetail.get_all(user_id=user.id)
                        textBasket = await MainForms.check(get_basket=basket)

                        text = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ {get_numer.id}!\n\n" \
                               f"–ò–º—è - <b>{getDataState['userName']}</b>\n"\
                               f"–¢–µ–ª–µ—Ñ–æ–Ω - <code>{getDataState['phone']}</code>\n"\
                               f"–í—Ä–µ–º—è - <b>{getDataState['time']}</b>\n"\
                               f"<tg-spoiler>----------------------------"\
                               f"</tg-spoiler>\n\n"\
                               f"{textBasket}"

                        tasks = []
                        for user in CONFIG.BOT.ADMINS:
                            tasks.append(bot.send_message(chat_id=user,
                                                          text=text,
                                                          reply_markup=await MainForms.confirmAdmin_ikb(
                                                              user_id=callback.from_user.id
                                                          ))
                                         )

                        await asyncio.gather(*tasks, return_exceptions=True)
                        await state.finish()

                    elif data.get('action') == "EditBasket":
                        await state.finish()
                        await callback.message.edit_text(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã",
                                                         reply_markup=await MainForms.editBasket_ikb(
                                                             user_id=callback.from_user.id)
                                                         )

                    elif data.get('action') == "EdShowName":
                        subCategory = await CRUDSubCategory.get(sub_category_id=int(data.get('id')))
                        await callback.answer(text=subCategory.name)

                    elif data.get('action') == "editDelete":
                        await CRUDOrderDetail.delete(orderDetail_id=int(data.get('id')))
                        await callback.answer(text="–í—ã —É–¥–∞–ª–∏–ª–∏ —Ç–æ–≤–∞—Ä!")
                        await callback.message.edit_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã",
                                                         reply_markup=await MainForms.editBasket_ikb(
                                                             user_id=callback.from_user.id))

                    elif data.get('action') == "editQuantity":
                        await state.update_data(basket_id=int(data.get('id')))
                        await state.update_data(product_id=int(data.get('editId')))

                        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!")
                        await UserStates.Quantity.set()

                elif data.get('target') == "Admins":
                    if data.get('action') == "Confirm":
                        await bot.send_message(chat_id=int(data.get('id')),
                                               text="–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è!")

                    elif data.get('action') == "WriteUser":
                        await state.update_data(user_id=int(data.get('id')))
                        await callback.message.answer(text="–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                                                      reply_markup=await MainForms.back_ikb(target="Main",
                                                                                               action=""))
                        await UserStates.WriteUser.set()

        if message:
            await message.delete()

            try:
                await bot.delete_message(
                    chat_id=message.from_user.id,
                    message_id=message.message_id - 1
                )
            except BadRequest:
                pass

            if state:
                if await state.get_state() == "UserStates:USERNAME":
                    await state.update_data(userName=message.text)
                    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                                         reply_markup=await MainForms.back_ikb(target="Basket",
                                                                               action="PlaceInOrder"))
                    await UserStates.Phone.set()

                elif await state.get_state() == "UserStates:Phone":
                    try:
                        phone_number = message.text
                        if phone_number[0] in "+":
                            phone_number = phone_number[1:]

                        if re.match(r"^(?:375|80)[0-9]{9}$", phone_number):
                            await state.update_data(phone=message.text)
                            await message.answer(text="–£—Ç–æ—á–Ω–∏—Ç–µ, –∫ –∫–∞–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑?",
                                                 reply_markup=await MainForms.back_ikb(target="",
                                                                                       action=""))
                            await UserStates.Time.set()
                        else:
                            await message.answer(text="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æ",
                                                 reply_markup=await MainForms.back_ikb(target="Basket",
                                                                                       action="PlaceInOrder"))
                            await UserStates.Phone.set()
                    except Exception as e:
                        print(f"Phone number error - {e}")

                        await message.answer(text="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æ",
                                             reply_markup=await MainForms.back_ikb(target="Basket",
                                                                                   action="PlaceInOrder"))
                        await UserStates.Phone.set()

                elif await state.get_state() == "UserStates:Time":
                    await state.update_data(time=message.text)
                    await message.answer(text="–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π?",
                                         reply_markup=await MainForms.bankCard_ikb())

                elif await state.get_state() == "UserStates:DESCRIPTION":
                    await state.update_data(description=message.text)
                    await MainForms.order(message=message, state=state)

                elif await state.get_state() == "UserStates:Quantity":
                    if message.text.isdigit():
                        getStateData = await state.get_data()
                        product = await CRUDProduct.get(product_id=int(getStateData['product_id']))
                        order_details = await CRUDOrderDetail.get(basket_id=getStateData['basket_id'])
                        order_details.quantity = int(message.text)
                        order_details.subtotal = int(message.text) * product.price
                        await CRUDOrderDetail.update(orderDetail=order_details)
                        await message.answer(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã",
                                             reply_markup=await MainForms.editBasket_ikb(user_id=message.from_user.id))
                        await state.finish()
                    else:
                        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!",
                                             reply_markup=await MainForms.back_ikb(target="Basket",
                                                                                   action="EditBasket"))
                        await UserStates.Quantity.set()

                elif await state.get_state() == "UserStates:WriteUser":
                    getStateData = await state.get_data()
                    await bot.send_message(chat_id=int(getStateData['user_id']),
                                           text=message.text)

                    await state.finish()
